@page "/app/journal/new"
@page "/app/journal/{id:guid}"
@namespace _10xJournal.Client.Features.JournalEntries.EditEntry
@using _10xJournal.Client.Features.JournalEntries.Models
@using _10xJournal.Client.Features.Authentication.Services
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject CurrentUserAccessor CurrentUserAccessor
@implements IDisposable

<div class="entry-editor">
    @if (_isLoading)
    {
        <div class="loading-container">
            <p>Loading entry...</p>
        </div>
    }
    else if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="error-container" role="alert">
            <p>@_errorMessage</p>
            <button @onclick="NavigateToList">Back to Entries</button>
        </div>
    }
    else
    {
        <header class="editor-header">
            <button class="back-button" @onclick="NavigateToList" aria-label="Back to entries">
                <span aria-hidden="true">‚Üê</span>
                <span>Back</span>
            </button>

            <SaveStatusIndicator Status="_saveStatus" LastSavedAt="_lastSavedAt" />

            @if (_entryId.HasValue)
            {
                <button class="delete-button" @onclick="HandleDeleteAsync" aria-label="Delete entry">
                    <span aria-hidden="true">üóë</span>
                    <span>Delete</span>
                </button>
            }
        </header>

        <main class="editor-main">
            <textarea 
                @ref="_textareaRef"
                @oninput="HandleInput"
                class="entry-textarea"
                placeholder="Start writing your journal entry..."
                aria-label="Journal entry content"
                rows="20">@_content</textarea>
        </main>
    }
</div>

@code {
    // Route parameter - Guid of entry to edit (null for new entry)
    [Parameter]
    public Guid? Id { get; set; }

    // State fields
    private string _content = string.Empty;
    private Guid? _entryId = null;
    private SaveStatus _saveStatus = SaveStatus.Idle;
    private DateTime? _lastSavedAt = null;
    private bool _isLoading = false;
    private string? _errorMessage = null;
    private ElementReference _textareaRef;
    private Timer? _autoSaveTimer = null;
    private bool _firstRender = true;

    // Constants
    private const int AUTOSAVE_DELAY_MS = 1000;
    private const string LOCALSTORAGE_KEY_PREFIX = "unsaved_entry_";

    /// <summary>
    /// Initializes the component. Loads existing entry if in edit mode,
    /// or checks LocalStorage for unsaved draft if in create mode.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        try
        {
            if (Id.HasValue && Id.Value != Guid.Empty)
            {
                // Edit mode - load existing entry
                await LoadEntryAsync(Id.Value);
            }
            else
            {
                // Create mode - check for unsaved draft
                await LoadUnsavedDraftAsync();
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load entry: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// Sets focus on the textarea after first render in create mode.
    /// </summary>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _firstRender && !Id.HasValue)
        {
            _firstRender = false;
            try
            {
                await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('.entry-textarea')?.focus()");
            }
            catch
            {
                // Focus failed, not critical
            }
        }
    }

    /// <summary>
    /// Loads an existing journal entry from the API.
    /// </summary>
    private async Task LoadEntryAsync(Guid entryId)
    {
        var response = await SupabaseClient
            .From<JournalEntry>()
            .Where(x => x.Id == entryId)
            .Single();

        if (response == null)
        {
            _errorMessage = "Entry not found.";
            return;
        }

        _content = response.Content;
        _entryId = response.Id;
    }

    /// <summary>
    /// Attempts to load an unsaved draft from LocalStorage.
    /// </summary>
    private async Task LoadUnsavedDraftAsync()
    {
        try
        {
            var key = $"{LOCALSTORAGE_KEY_PREFIX}new";
            var savedContent = await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
            
            if (!string.IsNullOrWhiteSpace(savedContent))
            {
                _content = savedContent;
            }
        }
        catch
        {
            // LocalStorage access failed, continue with empty content
        }
    }

    /// <summary>
    /// Handles input events from the textarea. Triggers debounced auto-save.
    /// </summary>
    private void HandleInput(ChangeEventArgs e)
    {
        _content = e.Value?.ToString() ?? string.Empty;

        // Cancel previous timer
        _autoSaveTimer?.Dispose();

        // Set new timer for debounced save
        _autoSaveTimer = new Timer(async _ => await AutoSaveAsync(), null, AUTOSAVE_DELAY_MS, Timeout.Infinite);

        // Save to LocalStorage immediately for draft recovery
        _ = SaveToLocalStorageAsync();
    }

    /// <summary>
    /// Performs auto-save operation after debounce delay.
    /// Creates new entry if _entryId is null, otherwise updates existing entry.
    /// </summary>
    private async Task AutoSaveAsync()
    {
        // Don't save empty content
        if (string.IsNullOrWhiteSpace(_content))
        {
            return;
        }

        _saveStatus = SaveStatus.Saving;
        await InvokeAsync(StateHasChanged);

        try
        {
            if (_entryId == null)
            {
                // Create new entry - get current user ID first
                var currentUserId = await CurrentUserAccessor.GetCurrentUserIdAsync();
                if (currentUserId == null || currentUserId == Guid.Empty)
                {
                    _saveStatus = SaveStatus.Error;
                    _errorMessage = "Could not determine current user. Please log in again.";
                    await InvokeAsync(StateHasChanged);
                    return;
                }

                var request = new Models.CreateJournalEntryRequest
                {
                    Content = _content
                };

                var response = await SupabaseClient
                    .From<JournalEntry>()
                    .Insert(new JournalEntry 
                    { 
                        Content = request.Content,
                        UserId = currentUserId.Value
                    });

                var createdEntry = response.Models.FirstOrDefault();
                if (createdEntry != null)
                {
                    _entryId = createdEntry.Id;
                    _lastSavedAt = DateTime.Now;
                    _saveStatus = SaveStatus.Saved;

                    // Clear LocalStorage after successful save
                    await ClearLocalStorageAsync();

                    // Update URL to edit mode without navigation
                    NavigationManager.NavigateTo($"/app/journal/{_entryId}", false);
                }
                else
                {
                    _saveStatus = SaveStatus.Error;
                }
            }
            else
            {
                // Update existing entry
                var request = new Models.UpdateJournalEntryRequest
                {
                    Content = _content,
                    Id = _entryId
                };

                await SupabaseClient
                    .From<JournalEntry>()
                    .Where(x => x.Id == _entryId.Value)
                    .Set(x => x.Content, request.Content)
                    .Update();

                _lastSavedAt = DateTime.Now;
                _saveStatus = SaveStatus.Saved;
            }
        }
        catch (Exception ex)
        {
            _saveStatus = SaveStatus.Error;
            _errorMessage = $"Failed to save: {ex.Message}";
        }

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Saves current content to LocalStorage for draft recovery.
    /// </summary>
    private async Task SaveToLocalStorageAsync()
    {
        try
        {
            var key = _entryId.HasValue 
                ? $"{LOCALSTORAGE_KEY_PREFIX}{_entryId.Value}" 
                : $"{LOCALSTORAGE_KEY_PREFIX}new";
            
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, _content);
        }
        catch
        {
            // LocalStorage save failed, not critical
        }
    }

    /// <summary>
    /// Clears the draft from LocalStorage after successful save.
    /// </summary>
    private async Task ClearLocalStorageAsync()
    {
        try
        {
            var key = _entryId.HasValue 
                ? $"{LOCALSTORAGE_KEY_PREFIX}{_entryId.Value}" 
                : $"{LOCALSTORAGE_KEY_PREFIX}new";
            
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", key);
        }
        catch
        {
            // LocalStorage clear failed, not critical
        }
    }

    /// <summary>
    /// Handles the delete button click. Shows confirmation and deletes the entry.
    /// </summary>
    private async Task HandleDeleteAsync()
    {
        if (!_entryId.HasValue)
        {
            return;
        }

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this entry? This action cannot be undone.");
        
        if (!confirmed)
        {
            return;
        }

        try
        {
            await SupabaseClient
                .From<JournalEntry>()
                .Where(x => x.Id == _entryId.Value)
                .Delete();

            await ClearLocalStorageAsync();
            NavigateToList();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to delete entry: {ex.Message}";
        }
    }

    /// <summary>
    /// Navigates back to the entries list.
    /// </summary>
    private void NavigateToList()
    {
        NavigationManager.NavigateTo("/app/journal");
    }

    /// <summary>
    /// Disposes the auto-save timer.
    /// </summary>
    public void Dispose()
    {
        _autoSaveTimer?.Dispose();
    }
}
