@page "/app/journal"
@using _10xJournal.Client.Features.JournalEntries.Models

<PageTitle>10xJournal - Mój dziennik</PageTitle>

<main class="journal-list-container">
    @if (_currentStreak > 0)
    {
        <div class="streak-indicator">
            <span class="streak-icon">🔥</span>
            <span class="streak-text">@_currentStreak dni z rzędu</span>
        </div>
    }

    <header class="journal-header">
        <h1>Mój dziennik</h1>
        <button class="btn-new-entry" @onclick="NavigateToNewEntry" aria-label="Utwórz nowy wpis">
            Nowy wpis
        </button>
    </header>

    @if (_isLoading)
    {
        <SkeletonLoader />
    }
    else if (_hasError)
    {
        <div class="error-message" role="alert">
            <p>@_errorMessage</p>
            <button class="btn-retry" @onclick="RetryLoadAsync">
                Spróbuj ponownie
            </button>
        </div>
    }
    else if (_entries.Count == 0)
    {
        <EmptyState OnCreateClick="NavigateToNewEntry" />
    }
    else
    {
        <section class="entries-list" aria-label="Lista wpisów dziennika">
            @foreach (var entry in _entries)
            {
                <EntryListItem Entry="entry" @key="entry.Id" />
            }
        </section>
    }
</main>

@code {
    [Inject] private Supabase.Client SupabaseClient { get; set; } = default!;
    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    private List<JournalEntry> _entries = new();
    private bool _isLoading = true;
    private bool _hasError = false;
    private string? _errorMessage;
    private int _currentStreak = 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            
            // Load entries and streak data in parallel
            var entriesTask = LoadEntriesAsync();
            var streakTask = LoadStreakAsync();
            
            await Task.WhenAll(entriesTask, streakTask);
        }
        catch (Exception ex)
        {
            _hasError = true;
            _errorMessage = "Wystąpił nieoczekiwany błąd podczas ładowania danych.";
            Console.Error.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task LoadEntriesAsync()
    {
        try
        {
            var response = await SupabaseClient
                .From<JournalEntry>()
                .Order(entry => entry.CreatedAt, Supabase.Postgrest.Constants.Ordering.Descending)
                .Get();

            _entries = response?.Models ?? new List<JournalEntry>();
        }
        catch (Exception ex) when (ex.Message.Contains("401") || ex.Message.Contains("Unauthorized"))
        {
            // Session expired - redirect to login
            _hasError = true;
            _errorMessage = "Twoja sesja wygasła. Zaloguj się ponownie.";
            await Task.Delay(2000); // Give user time to read the message
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (HttpRequestException)
        {
            _hasError = true;
            _errorMessage = "Nie można połączyć się z serwerem. Sprawdź swoje połączenie internetowe.";
        }
        catch (Exception ex)
        {
            _hasError = true;
            _errorMessage = "Wystąpił błąd podczas pobierania wpisów.";
            Console.Error.WriteLine($"Error loading entries: {ex.Message}");
        }
    }

    private async Task LoadStreakAsync()
    {
        try
        {
            var response = await SupabaseClient
                .From<UserStreak>()
                .Get();

            var streak = response?.Models?.FirstOrDefault();
            if (streak != null)
            {
                _currentStreak = streak.CurrentStreak;
            }
            else
            {
                _currentStreak = 0;
            }
        }
        catch (Exception ex)
        {
            // Log the error but don't block the main view
            Console.Error.WriteLine($"Error loading streak data: {ex.Message}");
            _currentStreak = 0;
        }
    }


    private void NavigateToNewEntry()
    {
        NavigationManager.NavigateTo("/app/journal/new");
    }

    private async Task RetryLoadAsync()
    {
        _hasError = false;
        _errorMessage = null;
        _isLoading = true;
        StateHasChanged();

        await OnInitializedAsync();
    }
}