@namespace _10xJournal.Client.Features.JournalEntries.CreateEntry

@page "/journal/create"
@using _10xJournal.Client.Features.JournalEntries.Models
@using _10xJournal.Client.Features.JournalEntries.CreateEntry
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject ILogger<CreateEntry> Logger

<PageTitle>Create New Entry</PageTitle>

<h1>Create New Journal Entry</h1>

<EditForm Model="@request" OnValidSubmit="HandleValidSubmitAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="content" class="form-label">Your thoughts for today:</label>
        <InputTextArea id="content" @bind-Value="request.Content" class="form-control" rows="10" />
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span>Saving...</span>
        }
        else
        {
            <span>Save Entry</span>
        }
    </button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3" role="alert">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private CreateJournalEntryRequest request = new CreateJournalEntryRequest();
    private bool isLoading = false;
    private string? errorMessage = null;

    private async Task HandleValidSubmitAsync()
    {
        isLoading = true;
        errorMessage = null;
        var correlationId = Guid.NewGuid();

        try
        {
            // Ensure we set the UserId so row-level security (RLS) allows the insert
            if (SupabaseClient == null)
                throw new InvalidOperationException("Supabase client is not available.");

            Guid? currentUserId = null;

            // Try common strongly-typed access first (in case API matches)
            try
            {
                // These members may or may not exist depending on the Supabase .NET client version
                var authProp = SupabaseClient.GetType().GetProperty("Auth");
                if (authProp != null)
                {
                    var auth = authProp.GetValue(SupabaseClient);
                    var currentUserProp = auth?.GetType().GetProperty("CurrentUser") ?? auth?.GetType().GetProperty("User");
                    var idProp = currentUserProp?.PropertyType.GetProperty("Id");
                    var idValue = currentUserProp != null ? currentUserProp.GetValue(auth) : null;
                    if (idValue != null)
                    {
                        var idCandidate = idProp?.GetValue(idValue) ?? idValue.GetType().GetProperty("Id")?.GetValue(idValue);
                        if (idCandidate is Guid g) currentUserId = g;
                        else if (idCandidate is string s && Guid.TryParse(s, out var parsed)) currentUserId = parsed;
                    }
                }
            }
            catch
            {
                // swallow â€” we'll try reflection fallback below
            }

            // Reflection fallback: look for any property path that contains an 'Id' string guid
            if (currentUserId == null)
            {
                foreach (var prop in SupabaseClient.GetType().GetProperties())
                {
                    try
                    {
                        var val = prop.GetValue(SupabaseClient);
                        if (val == null) continue;

                        var idProp = val.GetType().GetProperty("Id");
                        if (idProp == null) continue;
                        var idVal = idProp.GetValue(val);
                        if (idVal is Guid gg) { currentUserId = gg; break; }
                        if (idVal is string ss && Guid.TryParse(ss, out var p)) { currentUserId = p; break; }
                    }
                    catch { }
                }
            }

            if (currentUserId == null || currentUserId == Guid.Empty)
            {
                throw new InvalidOperationException("Could not determine current user id from Supabase session. Are you logged in?");
            }

            var newEntry = new JournalEntry { Content = request.Content, UserId = currentUserId.Value };
            var response = await SupabaseClient.From<JournalEntry>().Insert(newEntry);
            var createdEntry = response.Model;

            if (createdEntry != null)
            {
                Logger.LogInformation("Successfully created journal entry with ID: {EntryId}", createdEntry.Id);
                NavigationManager.NavigateTo("/journal/entries");
            }
            else
            {
                throw new InvalidOperationException("Failed to create journal entry. The response model was null.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating journal entry. Correlation ID: {CorrelationId}", correlationId);
            errorMessage = $"An error occurred while saving your entry. Please try again. Error ID: {correlationId}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
