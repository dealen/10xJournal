@page "/update-password"
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject ILogger<UpdatePasswordPage> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Zmiana hasła - 10xJournal</PageTitle>

<div class="update-password-container">
    @if (_isProcessingToken)
    {
        <p aria-live="polite">Przetwarzanie linku resetującego...</p>
    }
    else
    {
        <h1>Ustaw nowe hasło</h1>
        
        <p>
            Wprowadź nowe hasło dla swojego konta.
        </p>

        <UpdatePasswordForm />
    }
</div>

@code {
    private bool _isProcessingToken = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get the hash fragment from URL using JavaScript
                var hashFragment = await JSRuntime.InvokeAsync<string>("eval", "window.location.hash");
                
                if (!string.IsNullOrEmpty(hashFragment) && hashFragment.Contains("access_token"))
                {
                    Logger.LogInformation("Processing authentication tokens from URL hash fragment");
                    
                    // Parse the hash fragment to extract tokens
                    var hashParams = ParseHashFragment(hashFragment);
                    
                    if (hashParams.TryGetValue("access_token", out var accessToken) &&
                        hashParams.TryGetValue("refresh_token", out var refreshToken))
                    {
                        // Set the session manually
                        await SupabaseClient.Auth.SetSession(accessToken, refreshToken);
                        Logger.LogInformation("Session established successfully from hash fragment");
                    }
                }
                else
                {
                    Logger.LogInformation("No hash fragment tokens found, checking existing session");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error processing authentication tokens");
            }
            finally
            {
                _isProcessingToken = false;
                StateHasChanged();
            }
        }
    }

    private Dictionary<string, string> ParseHashFragment(string hash)
    {
        var result = new Dictionary<string, string>();
        
        // Remove the leading # if present
        if (hash.StartsWith("#"))
        {
            hash = hash.Substring(1);
        }
        
        // Split by & and parse key=value pairs
        var pairs = hash.Split('&');
        foreach (var pair in pairs)
        {
            var parts = pair.Split('=', 2);
            if (parts.Length == 2)
            {
                result[parts[0]] = Uri.UnescapeDataString(parts[1]);
            }
        }
        
        return result;
    }
}
