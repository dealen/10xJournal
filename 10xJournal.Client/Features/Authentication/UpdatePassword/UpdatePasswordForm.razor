@using Microsoft.AspNetCore.Components.Forms
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject ILogger<UpdatePasswordForm> Logger

<EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (_submitSuccess == true)
    {
        <div class="success-message" role="alert">
            <p>
                <strong>Hasło zostało zmienione!</strong>
            </p>
            <p>
                Twoje hasło zostało pomyślnie zaktualizowane. Za chwilę zostaniesz przekierowany do strony logowania.
            </p>
        </div>
    }

    @if (_submitSuccess == false && !string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="error-message" role="alert">
            <p>
                <strong>Wystąpił błąd podczas zmiany hasła.</strong>
            </p>
            <p>@_errorMessage</p>
        </div>
    }

    @if (!_isValidSession)
    {
        <div class="error-message" role="alert">
            <p>
                <strong>Nieprawidłowy lub wygasły link.</strong>
            </p>
            <p>
                Link do resetowania hasła jest nieprawidłowy lub wygasł. 
                Przejdź do <a href="/reset-password">strony resetowania hasła</a> i poproś o nowy link.
            </p>
        </div>
    }
    else if (_submitSuccess != true)
    {
        <label for="new-password">Nowe hasło</label>
        <input 
            id="new-password" 
            type="password" 
            @bind="_model.NewPassword" 
            @bind:event="oninput"
            autocomplete="new-password" 
            disabled="@_isSubmitting"
            required />
        <ValidationMessage For="@(() => _model.NewPassword)" />

        <label for="confirm-password">Potwierdź hasło</label>
        <input 
            id="confirm-password" 
            type="password" 
            @bind="_model.ConfirmPassword" 
            @bind:event="oninput"
            autocomplete="new-password" 
            disabled="@_isSubmitting"
            required />
        <ValidationMessage For="@(() => _model.ConfirmPassword)" />

        <button type="submit" disabled="@_isSubmitting">
            @(_isSubmitting ? "Zapisywanie..." : "Zmień hasło")
        </button>

        @if (_isSubmitting)
        {
            <p aria-live="polite" aria-busy="true">
                <small>Trwa zmiana hasła...</small>
            </p>
        }
    }
</EditForm>

@if (!_isValidSession)
{
    <p>
        <a href="/login">Powrót do logowania</a>
    </p>
}

@code {
    private UpdatePasswordModel _model = new();
    private bool _isSubmitting;
    private bool? _submitSuccess;
    private string? _errorMessage;
    private bool _isValidSession;

    /// <summary>
    /// Checks if the user has a valid password reset session on initialization.
    /// </summary>
    protected override void OnInitialized()
    {
        try
        {
            // Check if user has an active session (Supabase auto-signs in via the email link)
            var session = SupabaseClient.Auth.CurrentSession;
            
            // User should have a session if they came from the password reset email
            _isValidSession = session != null && session.User != null;

            if (!_isValidSession)
            {
                Logger.LogWarning("User attempted to access update password page without valid session");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error checking session in UpdatePasswordForm");
            _isValidSession = false;
        }
    }

    /// <summary>
    /// Handles the form submission after successful validation.
    /// Updates the user's password via Supabase Auth API.
    /// </summary>
    private async Task HandleValidSubmit()
    {
        // Prevent multiple submissions
        if (_isSubmitting || !_isValidSession)
        {
            return;
        }

        _isSubmitting = true;
        _submitSuccess = null;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            // Update the user's password using Supabase Auth
            var attributes = new Supabase.Gotrue.UserAttributes
            {
                Password = _model.NewPassword
            };

            await SupabaseClient.Auth.Update(attributes);

            Logger.LogInformation("Password successfully updated for user");

            // Success - show success message
            _submitSuccess = true;
            
            // Clear the password fields for security
            _model.NewPassword = string.Empty;
            _model.ConfirmPassword = string.Empty;

            // Redirect to login page after a short delay
            await Task.Delay(2000);
            NavigationManager.NavigateTo("/login", forceLoad: true);
        }
        catch (Supabase.Gotrue.Exceptions.GotrueException gotrueEx)
        {
            // Supabase-specific authentication error
            Logger.LogWarning(gotrueEx, "Supabase error during password update");
            
            _submitSuccess = false;
            
            // Check for specific error types
            if (gotrueEx.Message.Contains("expired", StringComparison.OrdinalIgnoreCase))
            {
                _errorMessage = "Link resetujący wygasł. Poproś o nowy link.";
            }
            else if (gotrueEx.Message.Contains("weak", StringComparison.OrdinalIgnoreCase) || 
                     gotrueEx.Message.Contains("password", StringComparison.OrdinalIgnoreCase))
            {
                _errorMessage = "Hasło jest zbyt słabe. Użyj silniejszego hasła.";
            }
            else
            {
                _errorMessage = "Nie udało się zmienić hasła. Spróbuj ponownie.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            // Network error
            Logger.LogError(httpEx, "Network error during password update");
            
            _submitSuccess = false;
            _errorMessage = "Problem z połączeniem internetowym. Sprawdź połączenie i spróbuj ponownie.";
        }
        catch (Exception ex)
        {
            // Unexpected error
            Logger.LogError(ex, "Unexpected error during password update");
            
            _submitSuccess = false;
            _errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}
