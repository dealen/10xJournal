@using Microsoft.AspNetCore.Components.Forms
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject ILogger<ResetPasswordForm> Logger

<EditForm Model="@_model" OnValidSubmit="@HandleValidSubmit" style="margin: 1rem;">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (_submitSuccess == true)
    {
        <div class="success-message" role="alert">
            <p>
                <strong>Link resetujący został wysłany!</strong>
            </p>
            <p>
                Jeśli podany adres e-mail jest zarejestrowany w systemie, otrzymasz link do resetowania hasła. 
                Sprawdź swoją skrzynkę pocztową, w tym folder spam.
            </p>
        </div>
    }

    @if (_submitSuccess == false && !string.IsNullOrWhiteSpace(_errorMessage))
    {
        <div class="error-message" role="alert">
            <p>
                <strong>Wystąpił błąd podczas wysyłania linku resetującego.</strong>
            </p>
            <p>@_errorMessage</p>
        </div>
    }

    @if (_submitSuccess != true)
    {
        <label for="reset-email">Adres e-mail</label>
        <input 
            id="reset-email" 
            type="email" 
            @bind="_model.Email" 
            @bind:event="oninput"
            autocomplete="email" 
            disabled="@_isSubmitting"
            placeholder="twoj@email.com"
            required />
        <ValidationMessage For="@(() => _model.Email)" />

        <button type="submit" disabled="@_isSubmitting">
            @(_isSubmitting ? "Wysyłanie..." : "Wyślij link resetujący")
        </button>

        @if (_isSubmitting)
        {
            <p aria-live="polite" aria-busy="true">
                <small>Trwa wysyłanie linku resetującego...</small>
            </p>
        }
    }
</EditForm>

<p>
    <a href="/login">Powrót do logowania</a>
</p>

@code {
    private ResetPasswordModel _model = new();
    private bool _isSubmitting;
    private bool? _submitSuccess;
    private string? _errorMessage;

    /// <summary>
    /// Handles the form submission after successful validation.
    /// Calls Supabase Auth API to send password reset email.
    /// </summary>
    private async Task HandleValidSubmit()
    {
        // Prevent multiple submissions
        if (_isSubmitting)
        {
            return;
        }

        _isSubmitting = true;
        _submitSuccess = null;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            // Call Supabase Auth API to send password reset email
            // According to security best practices, we don't reveal if email exists
            // Note: Redirect URL must be configured in Supabase Dashboard under:
            // Authentication > URL Configuration > Redirect URLs
            // Add: http://localhost:5000/update-password (dev) and production URL
            await SupabaseClient.Auth.ResetPasswordForEmail(_model.Email);

            Logger.LogInformation("Password reset email requested for: {Email}", _model.Email);

            // Success - show success message
            _submitSuccess = true;
            
            // Clear the email field for security
            _model.Email = string.Empty;
        }
        catch (Supabase.Gotrue.Exceptions.GotrueException gotrueEx)
        {
            // Supabase-specific authentication error
            Logger.LogWarning(gotrueEx, "Supabase error during password reset for: {Email}", _model.Email);
            
            _submitSuccess = false;
            _errorMessage = "Nie udało się wysłać linku resetującego. Spróbuj ponownie za chwilę.";
        }
        catch (HttpRequestException httpEx)
        {
            // Network error
            Logger.LogError(httpEx, "Network error during password reset for: {Email}", _model.Email);
            
            _submitSuccess = false;
            _errorMessage = "Problem z połączeniem internetowym. Sprawdź połączenie i spróbuj ponownie.";
        }
        catch (Exception ex)
        {
            // Unexpected error
            Logger.LogError(ex, "Unexpected error during password reset for: {Email}", _model.Email);
            
            _submitSuccess = false;
            _errorMessage = "Wystąpił nieoczekiwany błąd. Spróbuj ponownie później.";
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}
