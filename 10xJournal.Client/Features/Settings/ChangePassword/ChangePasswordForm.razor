@using Microsoft.AspNetCore.Components.Forms
@using _10xJournal.Client.Features.Settings.ChangePassword.Models
@inject Supabase.Client SupabaseClient
@inject ILogger<ChangePasswordForm> Logger

<section aria-labelledby="change-password-heading">
    <h2 id="change-password-heading">Zmiana hasła</h2>
    
    <EditForm Model="@changePasswordModel" OnValidSubmit="HandleChangePassword" aria-busy="@isSubmitting">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrWhiteSpace(errorMessage))
        {
            <p role="alert" style="color: var(--del-color);">@errorMessage</p>
        }

        @if (!string.IsNullOrWhiteSpace(successMessage))
        {
            <p role="status" style="color: var(--ins-color);">@successMessage</p>
        }

        @if (isSubmitting)
        {
            <p aria-live="polite">Zmiana hasła w toku...</p>
        }

        <label for="current-password">Aktualne hasło</label>
        <InputText id="current-password" 
                   @bind-Value="changePasswordModel.CurrentPassword" 
                   type="password" 
                   autocomplete="current-password" 
                   disabled="@isSubmitting"
                   required />
        <ValidationMessage For="() => changePasswordModel.CurrentPassword" />

        <label for="new-password">Nowe hasło</label>
        <InputText id="new-password" 
                   @bind-Value="changePasswordModel.NewPassword" 
                   type="password" 
                   autocomplete="new-password" 
                   disabled="@isSubmitting"
                   required />
        <ValidationMessage For="() => changePasswordModel.NewPassword" />

        <label for="confirm-password">Potwierdź nowe hasło</label>
        <InputText id="confirm-password" 
                   @bind-Value="changePasswordModel.ConfirmPassword" 
                   type="password" 
                   autocomplete="new-password" 
                   disabled="@isSubmitting"
                   required />
        <ValidationMessage For="() => changePasswordModel.ConfirmPassword" />

        <button type="submit" disabled="@isSubmitting" aria-disabled="@isSubmitting">
            @(isSubmitting ? "Zapisywanie..." : "Zmień hasło")
        </button>
    </EditForm>
</section>

@code {
    private ChangePasswordRequest changePasswordModel = new();
    private bool isSubmitting = false;
    private string? errorMessage;
    private string? successMessage;

    [Parameter]
    public EventCallback OnPasswordChanged { get; set; }

    /// <summary>
    /// Manages the user requests.
    /// Uses Supabase Auth API to update the password.
    /// </summary>
    private async Task HandleChangePassword()
    {
        if (isSubmitting)
        {
            return;
        }

        isSubmitting = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            // Supabase Auth API automatically verifies the current password
            // and updates it to the new one
            await SupabaseClient.Auth.Update(new Supabase.Gotrue.UserAttributes
            {
                Password = changePasswordModel.NewPassword
            });

            successMessage = "Hasło zostało pomyślnie zmienione.";
            Logger.LogInformation("User successfully changed password");

            // Reset the form
            changePasswordModel = new();

            // Inform the parent component about the password change
            if (OnPasswordChanged.HasDelegate)
            {
                await OnPasswordChanged.InvokeAsync();
            }
        }
        catch (Supabase.Gotrue.Exceptions.GotrueException ex)
        {
            Logger.LogWarning(ex, "Failed password change attempt");

            // Mapping Supabase errors to user-friendly messages
            errorMessage = ex.Message.Contains("Invalid login credentials")
                ? "Nieprawidłowe aktualne hasło. Spróbuj ponownie."
                : "Nie udało się zmienić hasła. Sprawdź, czy podałeś poprawne aktualne hasło.";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during password change");
            errorMessage = "Wystąpił błąd podczas zmiany hasła. Spróbuj ponownie później.";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
